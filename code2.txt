import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.cluster import KMeans
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, silhouette_score

# Load the dataset into a pandas DataFrame
df = pd.read_csv('crime_data.csv')

# Perform exploratory data analysis
print(df.head())
print(df.describe())

# Preprocess the data
# Drop irrelevant columns
df = df.drop(['Event Id', 'Circle Name', 'Caller Source', 'Data of crime'], axis=1)

# Replace missing values with the mean value of the column
df = df.fillna(df.mean())

# Normalize the data using StandardScaler
scaler = StandardScaler()
X = scaler.fit_transform(df.drop(['Police Station'], axis=1))

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, df['Police Station'], test_size=0.2, random_state=42)

# Train and evaluate a Decision Tree classifier
dt_classifier = DecisionTreeClassifier(random_state=42)
dt_classifier.fit(X_train, y_train)
y_pred = dt_classifier.predict(X_test)
print('Decision Tree Classifier Results:')
print('Accuracy:', accuracy_score(y_test, y_pred))
print('Confusion Matrix:')
print(confusion_matrix(y_test, y_pred))
print('Classification Report:')
print(classification_report(y_test, y_pred))

# Train and evaluate a Random Forest classifier
rf_classifier = RandomForestClassifier(random_state=42)
rf_classifier.fit(X_train, y_train)
y_pred = rf_classifier.predict(X_test)
print('Random Forest Classifier Results:')
print('Accuracy:', accuracy_score(y_test, y_pred))
print('Confusion Matrix:')
print(confusion_matrix(y_test, y_pred))
print('Classification Report:')
print(classification_report(y_test, y_pred))

# Train and evaluate a Support Vector Machine classifier
svm_classifier = SVC(random_state=42)
svm_classifier.fit(X_train, y_train)
y_pred = svm_classifier.predict(X_test)
print('Support Vector Machine Classifier Results:')
print('Accuracy:', accuracy_score(y_test, y_pred))
print('Confusion Matrix:')
print(confusion_matrix(y_test, y_pred))
print('Classification Report:')
print(classification_report(y_test, y_pred))

# Train and evaluate a K-means clustering
kmeans = KMeans(n_clusters=4, random_state=42)
kmeans.fit(X)
y_pred = kmeans.predict(X)
print('K-means Clustering Results:')
print('Silhouette Score:', silhouette_score(X, y_pred))
print('Cluster Centers:', kmeans.cluster_centers_)

# Visualize the clusters
plt.scatter(X[:, 0], X[:, 1], c=y_pred, cmap='viridis')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='red', marker='x')
plt.title('K-means Clustering')
plt.xlabel('Latitude')
plt.ylabel('Longitude')
plt.show()

# Visualize the number of crimes per police station
plt.figure(figsize=(12, 6))
sns.countplot(x='Police Station', data=df)
plt.title('Number of Crimes per Police Station')
plt.xlabel('Police Station')
plt.ylabel('Number of Crimes')
plt.show()

# Visualize the number of crimes by event type
plt.figure(figsize=(12, 6))
sns.countplot(x='Event Type', data=df)
plt
